import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Clase Item
class Item {
    private String nombre;
    private int cantidad;
    private String tipo; 
    private String descripcion;

    public Item(String nombre, int cantidad, String tipo, String descripcion) {
        this.nombre = nombre;
        this.cantidad = cantidad;
        this.tipo = tipo;
        this.descripcion = descripcion;
    }

    public String getNombre() {
        return nombre;
    }

    public int getCantidad() {
        return cantidad;
    }

    public String getTipo() {
        return tipo;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void usarItem() {
        if (cantidad > 0) {
            cantidad--;
            System.out.println("Usaste el item: " + nombre);
        } else {
            System.out.println("No hay suficientes " + nombre + " para usar.");
        }
    }
}

// Clase InventarioModel (Modelo)
class InventarioModel {
    private List<Item> items;

    public InventarioModel() {
        items = new ArrayList<>();
    }

    public void agregarItem(Item item) {
        items.add(item);
    }

    public void eliminarItem(Item item) {
        items.remove(item);
    }

    public List<Item> obtenerItems() {
        return items;
    }

    public Item buscarItem(String nombre) {
        for (Item item : items) {
            if (item.getNombre().equalsIgnoreCase(nombre)) {
                return item;
            }
        }
        return null; // Si no se encuentra el item
    }
}

// Clase InventarioView (Vista)
class InventarioView {
    public void mostrarInventario(List<Item> items) {
        System.out.println("Inventario:");
        for (Item item : items) {
            System.out.println("Nombre: " + item.getNombre() + ", Cantidad: " + item.getCantidad() + ", Tipo: " + item.getTipo());
        }
    }

    public void mostrarMensaje(String mensaje) {
        System.out.println(mensaje);
    }

    public void mostrarDetallesItem(Item item) {
        if (item != null) {
            System.out.println("Detalles del item:");
            System.out.println("Nombre: " + item.getNombre());
            System.out.println("Cantidad: " + item.getCantidad());
            System.out.println("Tipo: " + item.getTipo());
            System.out.println("Descripción: " + item.getDescripcion());
        } else {
            System.out.println("Item no encontrado.");
        }
    }
}

// Clase InventarioController (Controlador)
class InventarioController {
    private InventarioModel modelo;
    private InventarioView vista;

    public InventarioController(InventarioModel modelo, InventarioView vista) {
        this.modelo = modelo;
        this.vista = vista;
    }

    public void agregarItem(Item item) {
        modelo.agregarItem(item);
        vista.mostrarMensaje("Item agregado: " + item.getNombre());
    }

    public void eliminarItem(String nombre) {
        Item item = modelo.buscarItem(nombre);
        if (item != null) {
            modelo.eliminarItem(item);
            vista.mostrarMensaje("Item eliminado: " + nombre);
        } else {
            vista.mostrarMensaje("Item no encontrado.");
        }
    }

    public void verInventario() {
        vista.mostrarInventario(modelo.obtenerItems());
    }

    public void mostrarDetalles(String nombre) {
        Item item = modelo.buscarItem(nombre);
        vista.mostrarDetallesItem(item);
    }

    public void buscarItem(String nombre) {
        Item item = modelo.buscarItem(nombre);
        if (item != null) {
            vista.mostrarMensaje("Item encontrado: " + nombre);
        } else {
            vista.mostrarMensaje("Item no encontrado.");
        }
    }
}

// Clase Principal (AppInventario)
public class AppInventario {
    public static void main(String[] args) {
        InventarioModel modelo = new InventarioModel();
        InventarioView vista = new InventarioView();
        InventarioController controlador = new InventarioController(modelo, vista);

        Scanner scanner = new Scanner(System.in);
        boolean enEjecucion = true;

        while (enEjecucion) {
            System.out.println("Opciones: agregar, eliminar, inventario, buscar, detalles, salir");
            String opcion = scanner.nextLine();

            switch (opcion.toLowerCase()) {
                case "agregar":
                    System.out.println("Introduce el nombre del item:");
                    String nombre = scanner.nextLine();
                    System.out.println("Introduce la cantidad:");
                    int cantidad = scanner.nextInt();
                    scanner.nextLine(); // Consumir la nueva línea
                    System.out.println("Introduce el tipo (Arma, Poción, etc.):");
                    String tipo = scanner.nextLine();
                    System.out.println("Introduce la descripción:");
                    String descripcion = scanner.nextLine();
                    Item item = new Item(nombre, cantidad, tipo, descripcion);
                    controlador.agregarItem(item);
                    break;

                case "eliminar":
                    System.out.println("Introduce el nombre del item a eliminar:");
                    String nombreEliminar = scanner.nextLine();
                    controlador.eliminarItem(nombreEliminar);
                    break;

                case "inventario":
                    controlador.verInventario();
                    break;

                case "buscar":
                    System.out.println("Introduce el nombre del item a buscar:");
                    String nombreBuscar = scanner.nextLine();
                    controlador.buscarItem(nombreBuscar);
                    break;

                case "detalles":
                    System.out.println("Introduce el nombre del item para ver detalles:");
                    String nombreDetalles = scanner.nextLine();
                    controlador.mostrarDetalles(nombreDetalles);
                    break;

                case "salir":
                    enEjecucion = false;
                    break;

                default:
                    System.out.println("Opción no válida.");
            }
        }

        scanner.close();
    }
}
