public class Par<F, S> {
    // Campos para el primer y segundo valor del par.
    private F primero;
    private S segundo;

    // Constructor que inicializa el par con dos valores.
    public Par(F primero, S segundo) {
        this.primero = primero;  // Asignamos el valor al primero
        this.segundo = segundo;  // Asignamos el valor al segundo
    }

    // Métodos para obtener y cambiar los valores de los elementos.
    public F getPrimero() {
        return primero;  // Devuelve el valor del primer elemento
    }

    public void setPrimero(F primero) {
        this.primero = primero;  // Asigna un nuevo valor al primer elemento
    }

    public S getSegundo() {
        return segundo;  // Devuelve el valor del segundo elemento
    }

    public void setSegundo(S segundo) {
        this.segundo = segundo;  // Asigna un nuevo valor al segundo elemento
    }

    // Método para comparar dos pares y ver si son iguales.
    public boolean esIgual(Par<F, S> otroPar) {
        // Comparamos ambos elementos del par con el otro par.
        return this.primero.equals(otroPar.getPrimero()) && this.segundo.equals(otroPar.getSegundo());
    }

    // Método para devolver el par en formato legible.
    @Override
    public String toString() {
        // Formateamos el par en una cadena.
        return "(Primero: " + primero + ", Segundo: " + segundo + ")";
    }

    public static void main(String[] args) {
        // Creamos tres pares de tipo String e Integer.
        Par<String, Integer> par1 = new Par<>("Hola", 1);
        Par<String, Integer> par2 = new Par<>("Hola", 1);  // Este par es igual al par1
        Par<String, Integer> par3 = new Par<>("Adios", 2);  // Este par es diferente

        // Comparamos el par1 con el par2 (deberían ser iguales)
        System.out.println("Par 1 es igual a Par 2: " + par1.esIgual(par2));  // true
        // Comparamos el par1 con el par3 (no deberían ser iguales)
        System.out.println("Par 1 es igual a Par 3: " + par1.esIgual(par3));  // false
    }
}
