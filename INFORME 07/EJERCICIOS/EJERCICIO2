import java.io.*;
import java.util.*;

// Clase Personaje
class Personaje {
    private String nombre;
    private int vida;
    private int ataque;
    private int defensa;
    private int alcance;
    private int nivel;

    // Constructor
    public Personaje(String nombre, int vida, int ataque, int defensa, int alcance, int nivel) {
        if (vida <= 0 || ataque <= 0 || defensa <= 0 || alcance <= 0 || nivel <= 0) {
            throw new IllegalArgumentException("Todos los valores deben ser mayores a cero.");
        }
        this.nombre = nombre;
        this.vida = vida;
        this.ataque = ataque;
        this.defensa = defensa;
        this.alcance = alcance;
        this.nivel = nivel;
    }

    // Getters y Setters
    public String getNombre() {
        return nombre;
    }

    public int getVida() {
        return vida;
    }

    public void setVida(int vida) {
        if (vida > 0) {
            this.vida = vida;
        } else {
            throw new IllegalArgumentException("La vida debe ser mayor que cero.");
        }
    }

    public int getAtaque() {
        return ataque;
    }

    public void setAtaque(int ataque) {
        if (ataque > 0) {
            this.ataque = ataque;
        } else {
            throw new IllegalArgumentException("El ataque debe ser mayor que cero.");
        }
    }

    public int getDefensa() {
        return defensa;
    }

    public void setDefensa(int defensa) {
        if (defensa > 0) {
            this.defensa = defensa;
        } else {
            throw new IllegalArgumentException("La defensa debe ser mayor que cero.");
        }
    }

    public int getAlcance() {
        return alcance;
    }

    public void setAlcance(int alcance) {
        if (alcance > 0) {
            this.alcance = alcance;
        } else {
            throw new IllegalArgumentException("El alcance debe ser mayor que cero.");
        }
    }

    public int getNivel() {
        return nivel;
    }

    public void subirNivel() {
        this.nivel++;
        this.vida += 1; // Ejemplo: aumentar vida al subir de nivel
        this.ataque += 1; // Ejemplo: aumentar ataque
        this.defensa += 1; // Ejemplo: aumentar defensa
        this.alcance += 1; // Ejemplo: aumentar alcance
    }

    @Override
    public String toString() {
        return nombre + " " + vida + " " + ataque + " " + defensa + " " + alcance + " Nivel: " + nivel;
    }
}

// Clase Gestor
class Gestor {
    private List<Personaje> personajes;
    private String archivo;

    // Constructor
    public Gestor(String archivo) {
        this.archivo = archivo;
        this.personajes = new ArrayList<>();
        cargarPersonajes();
    }

    // Método para cargar personajes desde el archivo
    private void cargarPersonajes() {
        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(" ");
                if (datos.length == 6) {
                    String nombre = datos[0];
                    int vida = Integer.parseInt(datos[1]);
                    int ataque = Integer.parseInt(datos[2]);
                    int defensa = Integer.parseInt(datos[3]);
                    int alcance = Integer.parseInt(datos[4]);
                    int nivel = Integer.parseInt(datos[5]);
                    personajes.add(new Personaje(nombre, vida, ataque, defensa, alcance, nivel));
                }
            }
        } catch (IOException e) {
            System.out.println("No se pudo cargar el archivo.");
        }
    }

    // Método para guardar los personajes en el archivo
    private void guardarPersonajes() {
        try (PrintWriter pw = new PrintWriter(new FileWriter(archivo))) {
            for (Personaje p : personajes) {
                pw.println(p.getNombre() + " " + p.getVida() + " " + p.getAtaque() + " " + p.getDefensa() + " " + p.getAlcance() + " " + p.getNivel());
            }
        } catch (IOException e) {
            System.out.println("No se pudo guardar el archivo.");
        }
    }

    // Método para añadir un nuevo personaje
    public void agregarPersonaje(Personaje personaje) {
        for (Personaje p : personajes) {
            if (p.getNombre().equals(personaje.getNombre())) {
                System.out.println("El personaje ya existe.");
                return;
            }
        }
        personajes.add(personaje);
        guardarPersonajes();
    }

    // Método para borrar un personaje por su nombre
    public void borrarPersonaje(String nombre) {
        personajes.removeIf(p -> p.getNombre().equals(nombre));
        guardarPersonajes();
    }

    // Método para modificar atributos de un personaje
    public void modificarPersonaje(String nombre, int vida, int ataque, int defensa, int alcance) {
        for (Personaje p : personajes) {
            if (p.getNombre().equals(nombre)) {
                p.setVida(vida);
                p.setAtaque(ataque);
                p.setDefensa(defensa);
                p.setAlcance(alcance);
                guardarPersonajes();
                return;
            }
        }
        System.out.println("El personaje no existe.");
    }

    // Método para actualizar un atributo individual
    public void actualizarAtributo(String nombre, String atributo, int nuevoValor) {
        for (Personaje p : personajes) {
            if (p.getNombre().equals(nombre)) {
                switch (atributo.toLowerCase()) {
                    case "vida":
                        p.setVida(nuevoValor);
                        break;
                    case "ataque":
                        p.setAtaque(nuevoValor);
                        break;
                    case "defensa":
                        p.setDefensa(nuevoValor);
                        break;
                    case "alcance":
                        p.setAlcance(nuevoValor);
                        break;
                    default:
                        System.out.println("Atributo no válido.");
                        return;
                }
                guardarPersonajes();
                return;
            }
        }
        System.out.println("El personaje no existe.");
    }

    // Método para subir de nivel a un personaje
    public void subirNivelPersonaje(String nombre) {
        for (Personaje p : personajes) {
            if (p.getNombre().equals(nombre)) {
                p.subirNivel();
                guardarPersonajes();
                return;
            }
        }
        System.out.println("El personaje no existe.");
    }

    // Método para mostrar personajes ordenados por atributo
    public void filtrarPersonajesPorAtributo(String atributo) {
        personajes.sort((p1, p2) -> {
            switch (atributo.toLowerCase()) {
                case "vida":
                    return Integer.compare(p2.getVida(), p1.getVida());
                case "ataque":
                    return Integer.compare(p2.getAtaque(), p1.getAtaque());
                case "defensa":
                    return Integer.compare(p2.getDefensa(), p1.getDefensa());
                case "alcance":
                    return Integer.compare(p2.getAlcance(), p1.getAlcance());
                default:
                    System.out.println("Atributo no válido.");
                    return 0;
            }
        });
        mostrarPersonajes();
    }

    // Método para mostrar estadísticas generales
    public void mostrarEstadisticas() {
        int total = personajes.size();
        double vidaPromedio = personajes.stream().mapToInt(Personaje::getVida).average().orElse(0);
        double ataquePromedio = personajes.stream().mapToInt(Personaje::getAtaque).average().orElse(0);
        double defensaPromedio = personajes.stream().mapToInt(Personaje::getDefensa).average().orElse(0);
        double alcancePromedio = personajes.stream().mapToInt(Personaje::getAlcance).average().orElse(0);
        
        System.out.println("Total de personajes: " + total);
        System.out.println("Vida promedio: " + vidaPromedio);
        System.out.println("Ataque promedio: " + ataquePromedio);
        System.out.println("Defensa promedio: " + defensaPromedio);
        System.out.println("Alcance promedio: " + alcancePromedio);
    }

    // Método para mostrar todos los personajes
    public void mostrarPersonajes() {
        if (personajes.isEmpty()) {
            System.out.println("No hay personajes disponibles.");
        } else {
            for (Personaje p : personajes) {
                System.out.println(p);
            }
        }
    }
}

// Clase principal con el método main
public class Main {
    public static void main(String[] args) {
        // Crear una instancia del gestor de personajes, apuntando al archivo de texto
        Gestor gestor = new Gestor("texto.txt");

        // Crear nuevos personajes
        gestor.agregarPersonaje(new Personaje("Caballero", 4, 2, 4, 2, 1));
        gestor.agregarPersonaje(new Personaje("Guerrero", 2, 4, 2, 4, 1));
        gestor.agregarPersonaje(new Personaje("Arquero", 2, 4, 1, 8, 1));

        // Mostrar personajes
        System.out.println("Personajes actuales:");
        gestor.mostrarPersonajes();

        // Modificar atributos de un personaje
        System.out.println("\nModificando atributos de Arquero...");
        gestor.modificarPersonaje("Arquero", 3, 5, 1, 9);
        gestor.mostrarPersonajes();

        // Actualizar un solo atributo
        System.out.println("\nActualizando solo la vida de Caballero...");
        gestor.actualizarAtributo("Caballero", "vida", 5);
        gestor.mostrarPersonajes();

        // Subir de nivel a un personaje
        System.out.println("\nSubiendo de nivel a Guerrero...");
        gestor.subirNivelPersonaje("Guerrero");
        gestor.mostrarPersonajes();

        // Filtrar personajes por ataque
        System.out.println("\nFiltrando personajes por ataque...");
        gestor.filtrarPersonajesPorAtributo("ataque");

        // Mostrar estadísticas generales
        System.out.println("\nMostrando estadísticas generales...");
        gestor.mostrarEstadisticas();

        // Borrar personaje
        System.out.println("\nBorrando Arquero...");
        gestor.borrarPersonaje("Arquero");
        gestor.mostrarPersonajes();
    }
}
